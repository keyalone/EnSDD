level_row
rownames(tmp1)
level_row <- paste0('Domain', length(levels(as.factor(df[,i]))), '_', rownames(tmp1))
level_col <- paste0('Domain', length(as.factor(df[,i+1])), '_', colnames(tmp1))
level_col <- paste0('Domain', length(levels(as.factor(df[,i+1]))), '_', colnames(tmp1))
level_col
level_col
rownames(tmp1) <- level_row
colnames(tmp1) <- level_col
plot_sankey <- function(df, filter = 5){
data <- df
# df_list <- list()
source_sk <- c()
target_sk <- c()
values_sk <- c()
for (i in 1:(ncol(df)-1)) {
tmp1 <- create_df_Sankey(df[,i], df[,(i+1)])
level_row <- paste0('Domain', length(levels(as.factor(df[,i]))), '_', rownames(tmp1))
level_col <- paste0('Domain', length(levels(as.factor(df[,i+1]))), '_', colnames(tmp1))
rownames(tmp1) <- level_row
colnames(tmp1) <- level_col
tmp2 <- reshape2::melt(A)
tmp2 = tmp2[tmp2$value >= filter, ]
source_sk <- c(source_sk, tmp2[,1])
target_sk <- c(target_sk, tmp2[,2])
values_sk <- c(values_sk, tmp2[,3])
# df_list[[i]] <- tmp2
}
links <- data.frame(
source=source_sk,
target=target_sk,
value=values_sk
)
p = plot_sankey_fun(links)
p
}
plot_sankey(df, filter = 0)
plot_sankey(df, filter = 0)
plot_sankey <- function(df, filter = 5){
data <- df
# df_list <- list()
source_sk <- c()
target_sk <- c()
values_sk <- c()
for (i in 1:(ncol(df)-1)) {
tmp1 <- create_df_Sankey(df[,i], df[,(i+1)])
level_row <- paste0('Domain', length(levels(as.factor(df[,i]))), '_', rownames(tmp1))
level_col <- paste0('Domain', length(levels(as.factor(df[,i+1]))), '_', colnames(tmp1))
rownames(tmp1) <- level_row
colnames(tmp1) <- level_col
tmp2 <- reshape2::melt(A)
tmp2 = tmp2[tmp2$value >= filter, ]
source_sk <- c(source_sk, tmp2[,1])
target_sk <- c(target_sk, tmp2[,2])
values_sk <- c(values_sk, tmp2[,3])
# df_list[[i]] <- tmp2
}
links <- data.frame(
source=source_sk,
target=target_sk,
value=values_sk
)
p = plot_sankey_fun(links)
p
}
plot_sankey(df, filter = 0)
rownames(A)
level_row
level_col
plot_sankey <- function(df, filter = 5){
data <- df
# df_list <- list()
source_sk <- c()
target_sk <- c()
values_sk <- c()
for (i in 1:(ncol(df)-1)) {
tmp1 <- create_df_Sankey(df[,i], df[,(i+1)])
level_row <- paste0('Domain', length(levels(as.factor(df[,i]))), '_', rownames(tmp1))
level_col <- paste0('Domain', length(levels(as.factor(df[,i+1]))), '_', colnames(tmp1))
rownames(tmp1) <- level_row
colnames(tmp1) <- level_col
tmp2 <- reshape2::melt(temp1)
tmp2 = tmp2[tmp2$value >= filter, ]
source_sk <- c(source_sk, tmp2[,1])
target_sk <- c(target_sk, tmp2[,2])
values_sk <- c(values_sk, tmp2[,3])
# df_list[[i]] <- tmp2
}
links <- data.frame(
source=source_sk,
target=target_sk,
value=values_sk
)
p = plot_sankey_fun(links)
p
}
rm(list = ls())
create_df_Sankey <- function(cluster1, cluster2){
c1toc2 <- NULL
levels1 <- unique(cluster1)
levels2 <- unique(cluster2)
for(i in 1:length(levels1)){
res <- NULL
for(j in 1:length(levels2)) {
tmp <- length(which(cluster1 == levels1[i] & cluster2 == levels2[j]))
res <- c(res, tmp)
}
c1toc2 <- rbind(c1toc2, res)
}
colnames(c1toc2) <- levels2
rownames(c1toc2) <- levels1
return(c1toc2)
}
plot_sankey_fun = function(links){
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 12)
}
plot_sankey <- function(df, filter = 5){
data <- df
# df_list <- list()
source_sk <- c()
target_sk <- c()
values_sk <- c()
for (i in 1:(ncol(df)-1)) {
tmp1 <- create_df_Sankey(df[,i], df[,(i+1)])
level_row <- paste0('Domain', length(levels(as.factor(df[,i]))), '_', rownames(tmp1))
level_col <- paste0('Domain', length(levels(as.factor(df[,i+1]))), '_', colnames(tmp1))
rownames(tmp1) <- level_row
colnames(tmp1) <- level_col
tmp2 <- reshape2::melt(temp1)
tmp2 = tmp2[tmp2$value >= filter, ]
source_sk <- c(source_sk, tmp2[,1])
target_sk <- c(target_sk, tmp2[,2])
values_sk <- c(values_sk, tmp2[,3])
# df_list[[i]] <- tmp2
}
links <- data.frame(
source=source_sk,
target=target_sk,
value=values_sk
)
p = plot_sankey_fun(links)
p
}
df <- data.frame(level1 = c(1,2,2,1,2), level2 = c(1,2,2,1,3),
level3 = c(1,2,3,4,2))
rownames(df) <- paste0('sample', 1:5)
data <- df
A = create_df_Sankey(data[,1], data[,2])
B = create_df_Sankey(data[,2], data[,3])
sum(A) == nrow(data)
sum(B) == nrow(data)
rownames(A) = paste0("Domain10_", rownames(A))
rownames(B) = colnames(A) = paste0("Domain16_", rownames(B))
colnames(B) = paste0("Domain17_", colnames(B))
library(reshape2)
AA <- melt(A)
BB <- melt(B)
links <- data.frame(
source=c(AA[, 1], BB[, 1]),
target=c(AA[, 2], BB[, 2]),
value=c(AA[, 3], BB[, 3])
)
p = plot_sankey_fun(links)
p
plot_sankey(df, filter = 0)
plot_sankey <- function(df, filter = 5){
data <- df
# df_list <- list()
source_sk <- c()
target_sk <- c()
values_sk <- c()
for (i in 1:(ncol(df)-1)) {
tmp1 <- create_df_Sankey(df[,i], df[,(i+1)])
level_row <- paste0('Domain', length(levels(as.factor(df[,i]))), '_', rownames(tmp1))
level_col <- paste0('Domain', length(levels(as.factor(df[,i+1]))), '_', colnames(tmp1))
rownames(tmp1) <- level_row
colnames(tmp1) <- level_col
tmp2 <- reshape2::melt(tmp1)
tmp2 = tmp2[tmp2$value >= filter, ]
source_sk <- c(source_sk, tmp2[,1])
target_sk <- c(target_sk, tmp2[,2])
values_sk <- c(values_sk, tmp2[,3])
# df_list[[i]] <- tmp2
}
links <- data.frame(
source=source_sk,
target=target_sk,
value=values_sk
)
p = plot_sankey_fun(links)
p
}
plot_sankey(df, filter = 0)
links
i
data <- df
# df_list <- list()
source_sk <- c()
target_sk <- c()
values_sk <- c()
i
i <- 1
tmp1 <- create_df_Sankey(df[,i], df[,(i+1)])
level_row <- paste0('Domain', length(levels(as.factor(df[,i]))), '_', rownames(tmp1))
level_col <- paste0('Domain', length(levels(as.factor(df[,i+1]))), '_', colnames(tmp1))
View(tmp1)
rownames(tmp1) <- level_row
colnames(tmp1) <- level_col
Vie
View(tmp1)
Vi
View(A)
View(tmp1)
tmp2 <- reshape2::melt(tmp1)
tmp2 = tmp2[tmp2$value >= filter, ]
tmp2
AA <- melt(A)
AA
tmp2
dim(df)
plot_sankey <- function(df, filter = 5){
data <- df
df_list <- list()
# source_sk <- c()
# target_sk <- c()
# values_sk <- c()
for (i in 1:(ncol(df)-1)) {
tmp1 <- create_df_Sankey(df[,i], df[,(i+1)])
level_row <- paste0('Domain', length(levels(as.factor(df[,i]))), '_', rownames(tmp1))
level_col <- paste0('Domain', length(levels(as.factor(df[,i+1]))), '_', colnames(tmp1))
rownames(tmp1) <- level_row
colnames(tmp1) <- level_col
tmp2 <- reshape2::melt(tmp1)
tmp2 = tmp2[tmp2$value >= filter, ]
# source_sk <- c(source_sk, tmp2[,1])
# target_sk <- c(target_sk, tmp2[,2])
# values_sk <- c(values_sk, tmp2[,3])
df_list[[i]] <- tmp2
}
source_sk <- c()
target_sk <- c()
values_sk <- c()
for (j in 1:length(df_list)) {
source_sk <- c(source_sk, df_list[[j]][,1])
target_sk <- c(target_sk, df_list[[j]][,2])
values_sk <- c(values_sk, df_list[[j]][,3])
}
links <- data.frame(
source=source_sk,
target=target_sk,
value=values_sk
)
p = plot_sankey_fun(links)
p
}
plot_sankey(df, filter = 0)
plot_sankey(df, filter = 0)
data <- df
df_list <- list()
# source_sk <- c()
# target_sk <- c()
# values_sk <- c()
for (i in 1:(ncol(df)-1)) {
tmp1 <- create_df_Sankey(df[,i], df[,(i+1)])
level_row <- paste0('Domain', length(levels(as.factor(df[,i]))), '_', rownames(tmp1))
level_col <- paste0('Domain', length(levels(as.factor(df[,i+1]))), '_', colnames(tmp1))
rownames(tmp1) <- level_row
colnames(tmp1) <- level_col
tmp2 <- reshape2::melt(tmp1)
tmp2 = tmp2[tmp2$value >= filter, ]
# source_sk <- c(source_sk, tmp2[,1])
# target_sk <- c(target_sk, tmp2[,2])
# values_sk <- c(values_sk, tmp2[,3])
df_list[[i]] <- tmp2
}
filter = 0
data <- df
df_list <- list()
# source_sk <- c()
# target_sk <- c()
# values_sk <- c()
for (i in 1:(ncol(df)-1)) {
tmp1 <- create_df_Sankey(df[,i], df[,(i+1)])
level_row <- paste0('Domain', length(levels(as.factor(df[,i]))), '_', rownames(tmp1))
level_col <- paste0('Domain', length(levels(as.factor(df[,i+1]))), '_', colnames(tmp1))
rownames(tmp1) <- level_row
colnames(tmp1) <- level_col
tmp2 <- reshape2::melt(tmp1)
tmp2 = tmp2[tmp2$value >= filter, ]
# source_sk <- c(source_sk, tmp2[,1])
# target_sk <- c(target_sk, tmp2[,2])
# values_sk <- c(values_sk, tmp2[,3])
df_list[[i]] <- tmp2
}
source_sk <- c()
target_sk <- c()
values_sk <- c()
View(AA)
View(df_list[[1]])
View(df_list[[2]])
View(BB)
links <- data.frame(
source=c(df_list[[1]][, 1], df_list[[2]][, 1]),
target=c(df_list[[1]][, 2], df_list[[2]][, 2]),
value=c(df_list[[1]][, 3], df_list[[2]][, 3])
)
p = plot_sankey_fun(links)
p
View(links)
df_list[[1]]
View(links)
source_sk <- c()
target_sk <- c()
values_sk <- c()
for (j in 1:length(df_list)) {
source_sk <- c(source_sk, df_list[[j]][,1])
target_sk <- c(target_sk, df_list[[j]][,2])
values_sk <- c(values_sk, df_list[[j]][,3])
}
links <- data.frame(
source=source_sk,
target=target_sk,
value=values_sk
)
View(links)
df_list[[1]]
j <- 1
df_list[[j]][,1]
for (j in 1:length(df_list)) {
source_sk <- c(source_sk, df_list[[j]][,1])
target_sk <- c(target_sk, df_list[[j]][,2])
values_sk <- c(values_sk, df_list[[j]][,3])
}
source_sk
df_list[[j]][,1]
df_list[[j]][,2]
for (j in 1:length(df_list)) {
source_sk <- c(source_sk, as.character(df_list[[j]][,1]))
target_sk <- c(target_sk, df_list[[j]][,2])
values_sk <- c(values_sk, df_list[[j]][,3])
}
source_sk
source_sk <- c()
target_sk <- c()
values_sk <- c()
for (j in 1:length(df_list)) {
source_sk <- c(source_sk, as.character(df_list[[j]][,1]))
target_sk <- c(target_sk, as.character(df_list[[j]][,2]))
values_sk <- c(values_sk, as.character(df_list[[j]][,3]))
}
source_sk
target_sk
values_sk
source_sk <- c()
target_sk <- c()
values_sk <- c()
for (j in 1:length(df_list)) {
source_sk <- c(source_sk, as.character(df_list[[j]][,1]))
target_sk <- c(target_sk, as.character(df_list[[j]][,2]))
values_sk <- c(values_sk, df_list[[j]][,3])
}
values_sk
links <- data.frame(
source=source_sk,
target=target_sk,
value=values_sk
)
links
p = plot_sankey_fun(links)
p
df <- data.frame(level1 = c(1,2,2,1,2), level2 = c(1,2,2,1,3),
level3 = c(1,2,3,4,2))
rownames(df) <- paste0('sample', 1:5)
data <- df
A = create_df_Sankey(data[,1], data[,2])
B = create_df_Sankey(data[,2], data[,3])
sum(A) == nrow(data)
sum(B) == nrow(data)
rownames(A) = paste0("Domain10_", rownames(A))
rownames(B) = colnames(A) = paste0("Domain16_", rownames(B))
colnames(B) = paste0("Domain17_", colnames(B))
library(reshape2)
AA <- melt(A)
BB <- melt(B)
links <- data.frame(
source=c(df_list[[1]][, 1], df_list[[2]][, 1]),
target=c(df_list[[1]][, 2], df_list[[2]][, 2]),
value=c(df_list[[1]][, 3], df_list[[2]][, 3])
)
p = plot_sankey_fun(links)
p
plot_sankey(df, filter = 0)
create_df_Sankey <- function(cluster1, cluster2){
c1toc2 <- NULL
levels1 <- unique(cluster1)
levels2 <- unique(cluster2)
for(i in 1:length(levels1)){
res <- NULL
for(j in 1:length(levels2)) {
tmp <- length(which(cluster1 == levels1[i] & cluster2 == levels2[j]))
res <- c(res, tmp)
}
c1toc2 <- rbind(c1toc2, res)
}
colnames(c1toc2) <- levels2
rownames(c1toc2) <- levels1
return(c1toc2)
}
plot_sankey_fun = function(links){
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE, fontSize = 12)
}
plot_sankey <- function(df, filter = 5){
data <- df
df_list <- list()
# source_sk <- c()
# target_sk <- c()
# values_sk <- c()
for (i in 1:(ncol(df)-1)) {
tmp1 <- create_df_Sankey(df[,i], df[,(i+1)])
level_row <- paste0('Domain', length(levels(as.factor(df[,i]))), '_', rownames(tmp1))
level_col <- paste0('Domain', length(levels(as.factor(df[,i+1]))), '_', colnames(tmp1))
rownames(tmp1) <- level_row
colnames(tmp1) <- level_col
tmp2 <- reshape2::melt(tmp1)
tmp2 = tmp2[tmp2$value >= filter, ]
# source_sk <- c(source_sk, tmp2[,1])
# target_sk <- c(target_sk, tmp2[,2])
# values_sk <- c(values_sk, tmp2[,3])
df_list[[i]] <- tmp2
}
source_sk <- c()
target_sk <- c()
values_sk <- c()
for (j in 1:length(df_list)) {
source_sk <- c(source_sk, as.character(df_list[[j]][,1]))
target_sk <- c(target_sk, as.character(df_list[[j]][,2]))
values_sk <- c(values_sk, df_list[[j]][,3])
}
links <- data.frame(
source=source_sk,
target=target_sk,
value=values_sk
)
p = plot_sankey_fun(links)
p
}
plot_sankey(df, filter = 0)
? unique
? sankeyNetwork
library(devtools)
rm(list = ls())
load_all()
library(roxygen2)
load_all('.')
roxygenise()
library(EnSDD)
load_all('.')
roxygenise()
library(EnSDD)
library(EnSDD)
View(run_individual_cluster)
apply_STAGATE
View(run_individual_cluster)
build()
suppressMessages(library(EnSDD))
python_env <- "/home/vision/miniconda3/envs/EnSDD/bin/python"
counts_path = "/home/vision/Downloads/LHS/EnDecon/experiment/Human breast cancer/counts_matrix.txt"
loc_path = "/home/vision/Downloads/LHS/EnDecon/experiment/Human breast cancer/meta_data.txt"
img_path = "/home/vision/Downloads/LHS/EnDecon/experiment/Human breast cancer/V1_Breast_Cancer_Block_A_Section_1_image.tif"
reticulate::use_python(python_env, require = T)
reticulate::py_config()
Seurat.data <- data_process(counts_path, loc_path, img_path, n_HVG = 2000, n_PCA = 30)
library(clusterProfiler)
library(EnSDD)
library(EnSDD)
library(devtools)
library(EnSDD)
library(devtools)
library(roxygen2)
load_all()
roxygenise()
build()
build_manual()
last_trace()
rlang::last_trace()
tinytex::tlmgr_install("makeindex")
tinytex
library(tinytex)
tinytex::tlmgr_install("makeindex")
tinytex::install_tinytex()
build_manual()
library(tools)
texi2dvi()
build_manual('man/')
